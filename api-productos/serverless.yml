service: api-productos

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x # o la versión de Node.js que prefieras
  timeout: 30  
  iam:
    role: arn:aws:iam::385255784123:role/LabRole
    # Añadir permisos para DynamoDB
    statements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/prod_cursos_curses"
  stage: dev
  region: us-east-1 #

functions:
  createCurso:
    handler: functions/createCurso.createCurso
    events:
      - http:
          path: /cursos
          method: post
          cors: true
          integration: lambda
  getCurso:
    handler: functions/getCurso.getCurso
    events:
      - http:
          path: /cursos/{id}
          method: get
          cors: true
          integration: lambda
  updateCurso:
    handler: functions/updateCurso.updateCurso
    events:
      - http:
          path: /cursos/{id}
          method: put
          cors: true
          integration: lambda
  deleteCurso:
    handler: functions/deleteCurso.deleteCurso
    events:
      - http:
          path: /cursos/{id}
          method: delete
          cors: true
          integration: lambda
  listCursos:
    handler: functions/listCursos.listCursos
    events:
      - http:
          path: /cursos
          method: get
          cors: true
          integration: lambda

# plugins:
#   - serverless-offline # Descomenta si quieres usar serverless-offline