service: api-productos

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x # o la versión de Node.js que prefieras
  timeout: 30  
  iam:
    role: arn:aws:iam::385255784123:role/LabRole
    # Añadir permisos para DynamoDB
    statements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/prod_cursos"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/prod_user"
  stage: dev
  region: us-east-1 #

custom:
  tablePrefix: ${opt:stage, self:provider.stage}

resources:
  Resources:
    CursosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}_cursos
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: curso_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: curso_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

functions:
  createCurso:
    handler: functions/createCurso.createCurso
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
      USERS_TABLE_NAME: ${self:custom.tablePrefix}_user
    events:
      - http:
          path: /cursos
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  searchCursosByName:
    handler: functions/searchCursosByName.searchCursosByName
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
    events:
      - http:
          path: /cursos/search
          method: get
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token




  searchCursosByCategory:
    handler: functions/searchCursosByCategory.searchCursosByCategory
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
    events:
      - http:
          path: /cursos/category
          method: get
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  getCurso:
    handler: functions/getCurso.getCurso
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
    events:
      - http:
          path: /cursos/{id}
          method: get
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
              - tenant-id
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  updateCurso:
    handler: functions/updateCurso.updateCurso
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
    events:
      - http:
          path: /cursos/{id}
          method: put
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
              - tenant-id
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  deleteCurso:
    handler: functions/deleteCurso.deleteCurso
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
    events:
      - http:
          path: /cursos/{id}
          method: delete
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
              - tenant-id
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
            
  listCursos:
    handler: functions/listCursos.listCursos
    environment:
      CURSOS_TABLE_NAME: ${self:custom.tablePrefix}_cursos
    events:
      - http:
          path: /cursos
          method: get
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          authorizer:
            name: validarToken
            arn: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:api-usuarios-dev-validarToken
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
