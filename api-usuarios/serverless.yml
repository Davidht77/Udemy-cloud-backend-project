service: api-usuarios

plugins:
  - serverless-aws-documentation

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.13
  timeout: 30  
  iam:
    role: arn:aws:iam::150209693186:role/LabRole
  stage: dev
  region: us-east-1

custom:
  tablePrefix: ${opt:stage, self:provider.stage}
  documentation:
    version: '1'
    title: 'API de Usuarios'
    description: 'API para gestionar usuarios, autenticación y tokens de acceso'
    models:
      - name: "UsuarioInput"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            tenant_id:
              type: "string"
            user_id:
              type: "string"
            password:
              type: "string"
      - name: "LoginInput"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            tenant_id:
              type: "string"
            user_id:
              type: "string"
            password:
              type: "string"
      - name: "TokenValidationInput"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            token:
              type: "string"
      - name: "SuccessResponse"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            message:
              type: "string"
      - name: "LoginSuccessResponse"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            token:
              type: "string"
      - name: "ErrorResponse"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            error:
              type: "string"

resources:
  Resources:
    PersonasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}_user
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    AccessTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}_accessTokens
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

functions:
  createUsuario:
    handler: functions/CrearUsuario.lambda_handler
    environment:
      TABLE_NAME: ${self:custom.tablePrefix}_user
    events:
      - http:
          path: /usuarios/register
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          documentation:
            summary: "Registrar un nuevo usuario"
            description: "Crea un nuevo usuario en el sistema con un tenant_id, user_id y password."
            requestModels:
              "application/json": "UsuarioInput"
            methodResponses:
              - statusCode: '201'
                responseBody:
                  description: "Usuario creado exitosamente"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: '400'
                responseBody:
                  description: "Error en la petición"
                responseModels:
                  "application/json": "ErrorResponse"
      - http:
          path: /usuarios/validarToken
          method: options  # preflight
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - tenant-id
            allowCredentials: true

  loginUsuario:
    handler: functions/LoginUsuario.lambda_handler
    environment:
      USER_TABLE_NAME: ${self:custom.tablePrefix}_user
      ACCESS_TOKEN_TABLE_NAME: ${self:custom.tablePrefix}_accessTokens
    events:
      - http:
          path: /usuarios/login
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          documentation:
            summary: "Iniciar sesión"
            description: "Autentica a un usuario y devuelve un token de acceso."
            requestModels:
              "application/json": "LoginInput"
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: "Login exitoso, devuelve token"
                responseModels:
                  "application/json": "LoginSuccessResponse"
              - statusCode: '401'
                responseBody:
                  description: "Credenciales inválidas"
                responseModels:
                  "application/json": "ErrorResponse"

  validarToken:
    handler: functions/ValidarTokenAcceso.lambda_handler
    environment:
      ACCESS_TOKEN_TABLE_NAME: ${self:custom.tablePrefix}_accessTokens
    events:
      - http:
          path: /usuarios/validarToken
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          documentation:
            summary: "Validar token de acceso"
            description: "Verifica si un token de acceso es válido."
            requestModels:
              "application/json": "TokenValidationInput"
            methodResponses:
              - statusCode: '200'
                responseBody:
                  description: "El token es válido"
                responseModels:
                  "application/json": "SuccessResponse"
              - statusCode: '401'
                responseBody:
                  description: "El token es inválido o ha expirado"
                responseModels:
                  "application/json": "ErrorResponse"

