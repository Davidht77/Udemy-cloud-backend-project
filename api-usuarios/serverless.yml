service: api-usuarios

# plugins:
#   - serverless-aws-documentation

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  timeout: 30  
  iam:
    role: arn:aws:iam::150209693186:role/LabRole
  stage: dev
  region: us-east-1

custom:
  tablePrefix: ${opt:stage, self:provider.stage}

resources:
  Resources:
    PersonasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}_user
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    AccessTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}_accessTokens
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

functions:
  createUsuario:
    handler: functions/CrearUsuario.lambda_handler
    environment:
      TABLE_NAME: ${self:custom.tablePrefix}_user
    events:
      - http:
          path: /usuarios/register
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          
      - http:
          path: /usuarios/validarToken
          method: options  # preflight
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - tenant-id
            allowCredentials: true

  loginUsuario:
    handler: functions/LoginUsuario.lambda_handler
    environment:
      USER_TABLE_NAME: ${self:custom.tablePrefix}_user
      ACCESS_TOKEN_TABLE_NAME: ${self:custom.tablePrefix}_accessTokens
    events:
      - http:
          path: /usuarios/login
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true
          

  validarToken:
    handler: functions/ValidarTokenAcceso.lambda_handler
    environment:
      ACCESS_TOKEN_TABLE_NAME: ${self:custom.tablePrefix}_accessTokens
    events:
      - http:
          path: /usuarios/validarToken
          method: post
          cors:
            origin: 'http://localhost:5173'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Auth-Token
            allowCredentials: true

  getUsuario:
    handler: functions/getUsuario.lambda_handler
    environment:
      USER_TABLE_NAME: ${self:custom.tablePrefix}_user
      ACCESS_TOKEN_TABLE_NAME: ${self:custom.tablePrefix}_accessTokens
    events:
      - http:
          path: /usuarios/me
          method: get
          cors: true

